{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData } from './chartAPI';\nconst initialState = {\n  value: [],\n  status: 'idle'\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const fetchDataAsync = createAsyncThunk('chart/fetchData', async amount => {\n  const response = await fetchData(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const chartSlice = createSlice({\n  name: 'chart',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setData: (state, action) => [...state, action.payload],\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(fetchDataAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchDataAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value = action.payload;\n    });\n  }\n});\nexport const {\n  setData\n} = chartSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.chart.value)`\n\nexport const selectCount = state => state.chart.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default chartSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchData","initialState","value","status","fetchDataAsync","amount","response","data","chartSlice","name","reducers","setData","state","action","payload","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","chart","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["D:/projects/webplatform/PandoLogic/chart-jobs-views/src/features/Chart/chartSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData } from './chartAPI';\n\nconst initialState = {\n  value: [],\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const fetchDataAsync = createAsyncThunk(\n  'chart/fetchData',\n  async (amount) => {\n    const response = await fetchData(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const chartSlice = createSlice({\n  name: 'chart',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setData: (state, action) => [...state, action.payload],\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchDataAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchDataAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value = action.payload;\n      });\n  },\n});\n\nexport const { setData } = chartSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.chart.value)`\nexport const selectCount = (state) => state.chart.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default chartSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EADY;EAEnBC,MAAM,EAAE;AAFW,CAArB,C,CAKA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC5C,iBAD4C,EAE5C,MAAOO,MAAP,IAAkB;EAChB,MAAMC,QAAQ,GAAG,MAAMN,SAAS,CAACK,MAAD,CAAhC,CADgB,CAEhB;;EACA,OAAOC,QAAQ,CAACC,IAAhB;AACD,CAN2C,CAAvC;AASP,OAAO,MAAMC,UAAU,GAAGT,WAAW,CAAC;EACpCU,IAAI,EAAE,OAD8B;EAEpCR,YAFoC;EAGpC;EACAS,QAAQ,EAAE;IACRC,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB,CAAC,GAAGD,KAAJ,EAAWC,MAAM,CAACC,OAAlB,CADpB;IAERC,SAAS,EAAGH,KAAD,IAAW;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACV,KAAN,IAAe,CAAf;IACD,CARO;IASRc,SAAS,EAAGJ,KAAD,IAAW;MACpBA,KAAK,CAACV,KAAN,IAAe,CAAf;IACD,CAXO;IAYR;IACAe,iBAAiB,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;MACpCD,KAAK,CAACV,KAAN,IAAeW,MAAM,CAACC,OAAtB;IACD;EAfO,CAJ0B;EAqBpC;EACA;EACAI,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CACJC,OADH,CACWhB,cAAc,CAACiB,OAD1B,EACoCT,KAAD,IAAW;MAC1CA,KAAK,CAACT,MAAN,GAAe,SAAf;IACD,CAHH,EAIGiB,OAJH,CAIWhB,cAAc,CAACkB,SAJ1B,EAIqC,CAACV,KAAD,EAAQC,MAAR,KAAmB;MACpDD,KAAK,CAACT,MAAN,GAAe,MAAf;MACAS,KAAK,CAACV,KAAN,GAAcW,MAAM,CAACC,OAArB;IACD,CAPH;EAQD;AAhCmC,CAAD,CAA9B;AAmCP,OAAO,MAAM;EAAEH;AAAF,IAAcH,UAAU,CAACe,OAA/B,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIZ,KAAD,IAAWA,KAAK,CAACa,KAAN,CAAYvB,KAA3C,C,CAEP;AACA;;AACA,OAAO,MAAMwB,cAAc,GAAIrB,MAAD,IAAY,CAACsB,QAAD,EAAWC,QAAX,KAAwB;EAChE,MAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;EACA,IAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;IAC1BF,QAAQ,CAACV,iBAAiB,CAACZ,MAAD,CAAlB,CAAR;EACD;AACF,CALM;AAOP,eAAeG,UAAU,CAACsB,OAA1B"},"metadata":{},"sourceType":"module"}