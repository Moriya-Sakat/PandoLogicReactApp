{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\webplatform\\\\PandoLogic\\\\chart-jobs-views\\\\src\\\\features\\\\Chart\\\\ChartData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchDataAsync, selectData } from './chartSlice';\nimport { Chart } from \"react-google-charts\";\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ChartData() {\n  _s();\n\n  const dispatch = useDispatch();\n  const data = useSelector(selectData);\n  useEffect(() => {\n    dispatch(fetchDataAsync(new Date(), new Date()));\n  }, [dispatch]);\n  const chartData = data.map(item => [moment(item.date).format('MMMM DD'), item.totalPredictedJobsViews, item.totalViews, item.totalJobs]);\n  const dataArray = [[\"Date\", \"Predicated job views\", \"Job views\", \"Active jobs\"], ...chartData];\n  const options = {\n    title: \"Cumulative job views vs. prediction\",\n    curveType: \"function\",\n    seriesType: \"bars\",\n    series: {\n      0: {\n        color: '#00BFFF',\n        type: \"line\",\n        pointShape: \"star\"\n      },\n      1: {\n        color: '#9ACD32',\n        type: \"line\"\n      },\n      2: {\n        color: '#DCDCDC'\n      }\n    },\n    // intervals: { style: \"points\", pointSize: 20 },\n    legend: {\n      position: \"bottom\"\n    },\n    pointsVisible: true,\n    pointSize: 10\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      chartType: \"ComboChart\",\n      width: \"100%%\",\n      height: \"500px\",\n      data: dataArray,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChartData, \"8ZSi0OBRHkt2uIn6fVrA7mYaxeA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ChartData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartData\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","fetchDataAsync","selectData","Chart","moment","ChartData","dispatch","data","Date","chartData","map","item","date","format","totalPredictedJobsViews","totalViews","totalJobs","dataArray","options","title","curveType","seriesType","series","color","type","pointShape","legend","position","pointsVisible","pointSize"],"sources":["D:/projects/webplatform/PandoLogic/chart-jobs-views/src/features/Chart/ChartData.js"],"sourcesContent":["import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchDataAsync, selectData,} from './chartSlice';\nimport { Chart } from \"react-google-charts\";\nimport moment from 'moment'\n\nexport function ChartData() {\n  const dispatch = useDispatch();\n  const data = useSelector(selectData);\n\n  useEffect(() => {\n    dispatch(fetchDataAsync(new Date(), new Date()))\n  }, [dispatch])\n\n  const chartData = data.map((item) => (\n    [moment(item.date).format('MMMM DD'), \n    item.totalPredictedJobsViews, \n    item.totalViews, \n    item.totalJobs]));\n\n  const dataArray =   [\n    [\"Date\", \"Predicated job views\", \"Job views\", \"Active jobs\" ],\n    ...chartData\n  ];\n  \n   const options = {\n    title: \"Cumulative job views vs. prediction\",\n    curveType: \"function\",\n    seriesType: \"bars\",\n    series: {\n      0: { color: '#00BFFF' , type: \"line\", pointShape:\"star\" },\n      1: { color: '#9ACD32' , type: \"line\" },\n      2: { color: '#DCDCDC' },\n    },\n    // intervals: { style: \"points\", pointSize: 20 },\n    legend: { position: \"bottom\" },\n    pointsVisible: true,\n    pointSize: 10\n  };\n\n  return (\n    <div>\n      <Chart\n      chartType=\"ComboChart\"\n      width=\"100%%\"\n      height=\"500px\"\n      data={dataArray}\n      options={options} />\n    </div>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,cAA3C;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,OAAO,SAASC,SAAT,GAAqB;EAAA;;EAC1B,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;EACA,MAAMO,IAAI,GAAGR,WAAW,CAACG,UAAD,CAAxB;EAEAJ,SAAS,CAAC,MAAM;IACdQ,QAAQ,CAACL,cAAc,CAAC,IAAIO,IAAJ,EAAD,EAAa,IAAIA,IAAJ,EAAb,CAAf,CAAR;EACD,CAFQ,EAEN,CAACF,QAAD,CAFM,CAAT;EAIA,MAAMG,SAAS,GAAGF,IAAI,CAACG,GAAL,CAAUC,IAAD,IACzB,CAACP,MAAM,CAACO,IAAI,CAACC,IAAN,CAAN,CAAkBC,MAAlB,CAAyB,SAAzB,CAAD,EACAF,IAAI,CAACG,uBADL,EAEAH,IAAI,CAACI,UAFL,EAGAJ,IAAI,CAACK,SAHL,CADgB,CAAlB;EAMA,MAAMC,SAAS,GAAK,CAClB,CAAC,MAAD,EAAS,sBAAT,EAAiC,WAAjC,EAA8C,aAA9C,CADkB,EAElB,GAAGR,SAFe,CAApB;EAKC,MAAMS,OAAO,GAAG;IACfC,KAAK,EAAE,qCADQ;IAEfC,SAAS,EAAE,UAFI;IAGfC,UAAU,EAAE,MAHG;IAIfC,MAAM,EAAE;MACN,GAAG;QAAEC,KAAK,EAAE,SAAT;QAAqBC,IAAI,EAAE,MAA3B;QAAmCC,UAAU,EAAC;MAA9C,CADG;MAEN,GAAG;QAAEF,KAAK,EAAE,SAAT;QAAqBC,IAAI,EAAE;MAA3B,CAFG;MAGN,GAAG;QAAED,KAAK,EAAE;MAAT;IAHG,CAJO;IASf;IACAG,MAAM,EAAE;MAAEC,QAAQ,EAAE;IAAZ,CAVO;IAWfC,aAAa,EAAE,IAXA;IAYfC,SAAS,EAAE;EAZI,CAAhB;EAeD,oBACE;IAAA,uBACE,QAAC,KAAD;MACA,SAAS,EAAC,YADV;MAEA,KAAK,EAAC,OAFN;MAGA,MAAM,EAAC,OAHP;MAIA,IAAI,EAAEZ,SAJN;MAKA,OAAO,EAAEC;IALT;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAUD;;GA5Ceb,S;UACGL,W,EACJD,W;;;KAFCM,S"},"metadata":{},"sourceType":"module"}